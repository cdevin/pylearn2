!obj:pylearn2.train.Train {
    dataset: &train !obj:pylearn2.datasets.mnist.MNIST {
        which_set: 'train',
        one_hot: 1,
        start: 0,
        stop: 50000
    },
    model: !obj:pylearn2.models.mlp.MLP {
        layers: [
                !obj:noisylearn.projects.ndt.TreeSigmoid {
                     max_col_norm: 1.9365,
                     layer_name: 'y',
                     dim: 1,
                     sparse_init: 15,
                     #irange: .05
                 }
                ],
        nvis: 784,
    },
    algorithm: !obj:pylearn2.training_algorithms.sgd.SGD {
        batch_size: 200,
        learning_rate: .001,
        init_momentum: .5,
        monitoring_dataset:
            {
                'train' : *train,
                'valid' : !obj:pylearn2.datasets.mnist.MNIST {
                              which_set: 'train',
                              one_hot: 1,
                              start: 50000,
                              stop:  60000
                          },
                'test'  : !obj:pylearn2.datasets.mnist.MNIST {
                              which_set: 'test',
                              one_hot: 1,
                          }
            },
        #cost: !obj:pylearn2.costs.mlp.dropout.Dropout {
            #input_include_probs: { 'h0' : .8 },
            #input_scales: { 'h0': 1. }
        #},
        termination_criterion: !obj:pylearn2.termination_criteria.MonitorBased {
            channel_name: "valid_objective",
            prop_decrease: 0.,
            N: 50
        },
        #termination_criterion: !obj:pylearn2.termination_criteria.EpochCounter {
            #max_epochs: 50
        #},
        update_callbacks: !obj:pylearn2.training_algorithms.sgd.ExponentialDecay {
            decay_factor: 1.000004,
            min_lr: .000001
        }
    },
    extensions: [
        #!obj:pylearn2.train_extensions.best_params.MonitorBasedSaveBest {
             #channel_name: 'valid_objective',
             #save_path: "${PYLEARN2_TRAIN_FILE_FULL_STEM}_best.pkl"
        #},
        !obj:pylearn2.training_algorithms.sgd.MomentumAdjustor {
            start: 1,
            saturate: 250,
            final_momentum: .7
        }
    ],
    save_path: "${PYLEARN2_TRAIN_FILE_FULL_STEM}.pkl",
    save_freq: 1
}
