!obj:pylearn2.train.Train {
    dataset: &train  !obj:pylearn2.datasets.tfd.TFD {
        which_set: 'train',
        one_hot: 1,
        fold: 4,
        axes: ['c', 0, 1, 'b'],
        preprocessor: !obj:pylearn2.datasets.preprocessing.GlobalContrastNormalization {} 
    },
    model: !obj:pylearn2.models.mlp.MLP {
        batch_size: 50,
        layers: [
                 !obj:noisy_encoder.models.convlinear.ConvLinearStochasticSoftmaxPoolC01B {
                     layer_name: 'h0',
                     W_lr_scale: .5,
                     b_lr_scale: .5,
                     pad: 0,
                     detector_channels: 96,
                     channel_pool_size: 2,
                     kernel_shape: [8, 8],
                     pool_shape: [4, 4],
                     pool_stride: [2, 2],
                     irange: .005,
                     max_kernel_norm: .9,
                 },
                !obj:noisy_encoder.models.convlinear.ConvLinearStochasticSoftmaxPoolC01B {
                     layer_name: 'h1',
                     W_lr_scale: .5,
                     b_lr_scale: .5,
                     pad: 3,
                     detector_channels: 96,
                     channel_pool_size: 2,
                     kernel_shape: [8, 8],
                     pool_shape: [4, 4],
                     pool_stride: [2, 2],
                     irange: .005,
                     max_kernel_norm: 1.9365,
                 },
                 !obj:pylearn2.models.mlp.Softmax {
                     #max_col_norm: 3.873,
                     max_col_norm: 1.9365,
                     layer_name: 'y',
                     n_classes: 7,
                     irange: .005
                 }
                ],
        input_space: !obj:pylearn2.space.Conv2DSpace {
            shape: [48, 48],
            num_channels: 1,
            axes: ['c', 0, 1, 'b'],
        },
        dropout_include_probs: [ 1, 1, 1 ],
        dropout_input_include_prob: .8,
        dropout_input_scale: 1.,
    },
    algorithm: !obj:pylearn2.training_algorithms.sgd.SGD {
        learning_rate: .05,
        init_momentum: .5,
        monitoring_dataset:
            {
                'valid': !obj:pylearn2.datasets.tfd.TFD {
                    which_set: 'valid',
                    one_hot: 1,
                    fold: 4,
                    axes: ['c', 0, 1, 'b'],
                    preprocessor: !obj:pylearn2.datasets.preprocessing.GlobalContrastNormalization {} 
                },
                'test': !obj:pylearn2.datasets.tfd.TFD {
                    which_set: 'test',
                    one_hot: 1,
                    fold: 4,
                    axes: ['c', 0, 1, 'b'],
                    preprocessor: !obj:pylearn2.datasets.preprocessing.GlobalContrastNormalization {} 
                },
            },
        cost: !obj:pylearn2.costs.cost.MethodCost {
                method: 'cost_from_X',
                supervised: 1
        },
        termination_criterion: !obj:pylearn2.termination_criteria.MonitorBased {
            channel_name: "valid_y_misclass",
            prop_decrease: 0.,
            N: 100
        },
        update_callbacks: !obj:pylearn2.training_algorithms.sgd.ExponentialDecay {
            decay_factor: 1.00004,
            min_lr: .000001
        }
    },
    extensions: [
        !obj:pylearn2.train_extensions.best_params.MonitorBasedSaveBest {
             channel_name: 'valid_y_misclass',
             save_path: "${PYLEARN2_TRAIN_FILE_FULL_STEM}_best.pkl"
        },
        !obj:pylearn2.training_algorithms.sgd.MomentumAdjustor {
            start: 20,
            saturate: 250,
            final_momentum: .6
        }
    ],
    save_path: "${PYLEARN2_TRAIN_FILE_FULL_STEM}.pkl",
    save_freq: 1
}
