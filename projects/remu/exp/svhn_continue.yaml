!obj:pylearn2.train.Train {
    dataset: &train !obj:pylearn2.datasets.svhn.SVHN {
        which_set: 'splitted_train',
        path: %(data_path)s
    },
    model: !obj:pylearn2.monitor.push_monitor {
        model: !obj:noisylearn.projects.remu.serial.copy_load {
            file_name: 'old_best.pkl',
            src: '/RQexec/mirzameh/jobs/mirzamom_db/remu_svhn/13/best.pkl'
        },
        name: 'old_monitor',
        transfer_experience: 1
    },
    algorithm: !obj:pylearn2.training_algorithms.sgd.SGD {
        learning_rate: %(learning_rate)f,
        init_momentum: .5,
        train_iteration_mode: 'batchwise_shuffled_sequential',
        monitoring_dataset:
            {
                #'train' : *train,
                'valid' : !obj:pylearn2.datasets.svhn.SVHN {
                              which_set: 'valid',
                              path: %(data_path)s,
                          },
                'test' : !obj:pylearn2.datasets.svhn.SVHN {
                              which_set: 'test',
                              path: %(data_path)s,
                          }
            },
        cost: !obj:pylearn2.costs.mlp.dropout.Dropout {
            input_include_probs: { 'h0' : .8 },
            input_scales: { 'h0': 1. }
        },
        termination_criterion: !obj:pylearn2.termination_criteria.Or {
            criteria: [
                !obj:pylearn2.termination_criteria.MonitorBased {
                    channel_name: "valid_y_misclass",
                    prop_decrease: 0,
                    N: 100
                },
                !obj:pylearn2.termination_criteria.ChannelInf {
                    channel_name: 'valid_y_objective'
                },
            ],
        },

    },
    extensions: [
        !obj:pylearn2.train_extensions.best_params.MonitorBasedSaveBest {
             channel_name: 'valid_y_misclass',
             save_path: "%(save_path)sbest.pkl"
        },
        !obj:pylearn2.training_algorithms.sgd.MomentumAdjustor {
            start: 1,
            saturate: %(momentum_saturate)i,
            final_momentum: %(final_momentum)f,
        },
        !obj:pylearn2.training_algorithms.sgd.LinearDecayOverEpoch {
            start: 1,
            saturate: %(lr_sat)i,
            decay_factor: %(lr_decay)f
        },

    ],
    save_path: "%(save_path)slast.pkl",
    save_freq: 1
}

