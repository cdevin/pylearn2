!obj:pylearn2.train.Train {
    dataset: &train !obj:pylearn2.datasets.mnist.MNIST {
        which_set: 'train',
        start: 0,
        stop: 50000
    },
    model: !obj:pylearn2.models.mlp.MLP {
        layers: [
                 !obj:noisylearn.projects.gating2.SelfGated {
                    content: !obj:pylearn2.models.mlp.RectifiedLinear {
                         layer_name: 'h0',
                         dim : 890,
                         irange: 0.00891030471479,
                         max_col_norm: 4.378017,
                         init_bias: 0.0
                        },
                    noise_type: 'group_mean',
                    group_size: 10,
                 },
                 !obj:noisylearn.projects.gating2.SelfGated {
                    content: !obj:pylearn2.models.mlp.RectifiedLinear {
                         layer_name: 'h1',
                         dim: 1530,
                         irange: 0.0575059125935,
                         max_col_norm: 2.970242,
                         init_bias: 0.0
                        },
                    noise_type: 'group_mean',
                    group_size: 10,
                 },
                 !obj:pylearn2.models.mlp.Softmax {
                     max_col_norm: 4.626974,
                     layer_name: 'y',
                     n_classes: 10,
                     sparse_init: 0,
                 }
                ],
        nvis: 784,
    },
    algorithm: !obj:pylearn2.training_algorithms.sgd.SGD {
        batch_size: 100,
        learning_rate: 0.097259,
        learning_rule: !obj:pylearn2.training_algorithms.learning_rule.Momentum {
            init_momentum: .5,
        },
        monitoring_dataset:
            {
                'train' : *train,
                'valid' : !obj:pylearn2.datasets.mnist.MNIST {
                              which_set: 'train',
                              start: 50000,
                              stop:  60000
                          },
                'test'  : !obj:pylearn2.datasets.mnist.MNIST {
                              which_set: 'test',
                          }
            },
        cost: !obj:pylearn2.costs.mlp.dropout.Dropout {
            input_include_probs: { 'h0' : .8 },
            input_scales: { 'h0': 1.25 }
        },
        termination_criterion: !obj:pylearn2.termination_criteria.MonitorBased {
            channel_name: "valid_y_misclass",
            prop_decrease: 0.,
            N: 100
        },
        #update_callbacks: !obj:pylearn2.training_algorithms.sgd.ExponentialDecay {
            #decay_factor: 1.000004,
            #min_lr: .000001
        #}
    },
    extensions: [
        !obj:pylearn2.train_extensions.best_params.MonitorBasedSaveBest {
             channel_name: 'valid_y_misclass',
             save_path: "${PYLEARN2_TRAIN_FILE_FULL_STEM}_best.pkl"
        },
        !obj:pylearn2.training_algorithms.learning_rule.MomentumAdjustor {
            start: 1,
            saturate: 698,
            final_momentum: 0.699217
        },
        !obj:pylearn2.training_algorithms.sgd.LinearDecayOverEpoch {
            start: 1,
            saturate: 560,
            decay_factor: 0.022292,
        },
    ],
    save_path: "${PYLEARN2_TRAIN_FILE_FULL_STEM}.pkl",
    save_freq: 1
}
