!obj:pylearn2.train.Train {
    dataset: &train !obj:pylearn2.sandbox.nlp.datasets.penntree.PennTreebank {
        which_set: 'train',
        context_len: &context_len 5
    },
    #model: !obj:noisylearn.projects.gating2.MLP {
    model: !obj:pylearn2.models.mlp.MLP {
        layers: [
                 !obj:pylearn2.sandbox.nlp.models.mlp.ProjectionLayer {
                    dim: 100,
                    layer_name: 'h0',
                    irange: 0.01
                 },
                 !obj:pylearn2.models.maxout.Maxout {
                     layer_name: 'h1',
                     num_units: 1000,
                     num_pieces: 2,
                     irange: 0.01,
                     max_col_norm: 1.5,
                 },
                 !obj:pylearn2.models.maxout.Maxout {
                     layer_name: 'h2',
                     num_units: 1000,
                     num_pieces: 1,
                     irange: 0.01,
                     max_col_norm: 1.5,
                 },
                 !obj:noisylearn.projects.gating2.NCE {
                     max_col_norm: 1.5,
                     layer_name: 'y',
                     n_classes: 10000,
                     irange: 0.01,
                 }
                ],
        input_space: !obj:pylearn2.space.IndexSpace {
                dim : *context_len,
                max_labels: 10000
        }
    },
    algorithm: !obj:pylearn2.training_algorithms.sgd.SGD {
        batch_size: 256,
        learning_rate: 0.1,
        learning_rule: !obj:pylearn2.training_algorithms.learning_rule.Momentum {
            init_momentum: .5,
        },
        monitoring_dataset:
            {
                #'train' : *train,
                'valid' : !obj:pylearn2.sandbox.nlp.datasets.penntree.PennTreebank {
                        which_set: 'valid',
                        context_len: *context_len
                },
                'test' : !obj:pylearn2.sandbox.nlp.datasets.penntree.PennTreebank {
                        which_set: 'test',
                        context_len: *context_len
                },
            },
        cost: !obj:pylearn2.costs.mlp.dropout.Dropout {
            input_include_probs: {},
            input_scales: {'h0' : 1}
        },
        termination_criterion: !obj:pylearn2.termination_criteria.MonitorBased {
            channel_name: "valid_y_perplexity",
            prop_decrease: 0,
            N: 100
        },
    },
    extensions: [
        #!obj:pylearn2.train_extensions.best_params.MonitorBasedSaveBest {
             #channel_name: 'valid_y_perplexity',
             #save_path: "%(save_path)sbest.pkl"
        #},
        !obj:pylearn2.training_algorithms.learning_rule.MomentumAdjustor {
            start: 1,
            saturate: 50,
            final_momentum: 0.7
        },
        !obj:pylearn2.training_algorithms.sgd.LinearDecayOverEpoch {
            start: 1,
            saturate: 50,
            decay_factor: 0.001
        },
    ],
    #save_path: "last.pkl",
    #save_freq: 1
}
