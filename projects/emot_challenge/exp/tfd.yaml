!obj:pylearn2.train.Train {
    dataset: &train !obj:pylearn2.datasets.tfd.TFD {
        axes: ['c', 0, 1, 'b'],
        which_set: 'train',
        fold: %(fold)i,
        scale: 1,
        one_hot: 1,
        preprocessor: !obj:pylearn2.datasets.preprocessing.Pipeline {
            items: [
                !obj:pylearn2.datasets.preprocessing.GlobalContrastNormalization {},
                !obj:pylearn2.datasets.preprocessing.LeCunLCN {
                    img_shape: [48, 48],
                    kernel_size: 5,
                    channels: 0,
                },
            ]
        }
    },
    model: !obj:pylearn2.models.mlp.MLP {
        batch_size: 128,
        layers: [
                 !obj:pylearn2.models.maxout.MaxoutConvC01B {
                     layer_name: 'h0',
                     pad: 0,
                     num_channels: %(h0_ch)i,
                     num_pieces: 2,
                     kernel_shape: [8, 8],
                     pool_shape: [4, 4],
                     pool_stride: [2, 2],
                     irange: .005,
                     max_kernel_norm: .9,
                     W_lr_scale: .05,
                     b_lr_scale: .05,
                 },
                 !obj:pylearn2.models.maxout.MaxoutConvC01B {
                     layer_name: 'h1',
                     pad: 3,
                     num_channels: %(h1_ch)i,
                     num_pieces: 2,
                     kernel_shape: [8, 8],
                     pool_shape: [4, 4],
                     pool_stride: [2, 2],
                     irange: .005,
                     max_kernel_norm: 1.9365,
                     W_lr_scale: .05,
                     b_lr_scale: .05,
                 },
                 !obj:pylearn2.models.maxout.MaxoutConvC01B {
                     pad: 3,
                     layer_name: 'h2',
                     num_channels: %(h2_ch)i,
                     num_pieces: 4,
                     kernel_shape: [5, 5],
                     pool_shape: [2, 2],
                     pool_stride: [2, 2],
                     irange: .005,
                     max_kernel_norm: 1.9365,
                     W_lr_scale: .05,
                     b_lr_scale: .05,
                 },
                 !obj:pylearn2.models.maxout.Maxout {
                    layer_name: 'h3',
                    irange: .005,
                    num_units: %(h3_units)i,
                    num_pieces: 5,
                    max_col_norm: 1.9
                 },
                 !obj:pylearn2.models.mlp.Softmax {
                     max_col_norm: 1.9365,
                     layer_name: 'y',
                     n_classes: 7,
                     #irange: .005
                     sparse_init: 23,
                 }
                ],
        input_space: !obj:pylearn2.space.Conv2DSpace {
            shape: [48, 48],
            num_channels: 1,
            axes: ['c', 0, 1, 'b'],
        },
    },
    algorithm: !obj:pylearn2.training_algorithms.sgd.SGD {
        learning_rate: %(learning_rate)f,
        init_momentum: .5,
        monitoring_dataset:
            {
                'valid' : !obj:pylearn2.datasets.tfd.TFD {
                              axes: ['c', 0, 1, 'b'],
                              which_set: 'valid',
                              fold: %(fold)i,
                              scale: 1,
                              one_hot: 1,
                              preprocessor: !obj:pylearn2.datasets.preprocessing.Pipeline {
                                items: [
                                    !obj:pylearn2.datasets.preprocessing.GlobalContrastNormalization {},
                                    !obj:pylearn2.datasets.preprocessing.LeCunLCN {
                                        img_shape: [48, 48],
                                        kernel_size: 5,
                                        channels: 0,
                                    },
                                ]
                            }
                          },
            },
        cost: !obj:pylearn2.costs.mlp.dropout.Dropout {
            input_include_probs: { 'h0' : .8 },
            input_scales: { 'h0': 1. }
        },
        termination_criterion: !obj:pylearn2.termination_criteria.MonitorBased {
            channel_name: "valid_y_misclass",
            prop_decrease: 0.,
            N: 100
        },
    },
    extensions: [
        !obj:pylearn2.train_extensions.window_flip.WindowAndFlipC01B {
            window_shape: [48, 48],
            pad_randomized: 4,
            randomize: [*train]
        },
        !obj:pylearn2.train_extensions.best_params.MonitorBasedSaveBest {
             channel_name: 'valid_y_misclass',
             save_path: "%(save_path)sbest.pkl"
        },
        !obj:pylearn2.training_algorithms.sgd.MomentumAdjustor {
            start: 1,
            saturate: 250,
            final_momentum: .7
        },
        !obj:pylearn2.training_algorithms.sgd.LinearDecayOverEpoch {
            start: 1,
            saturate: 250,
            decay_factor: %(lr_de_fac)f,
        },
        !obj:noisy_encoder.utils.best_params.MonitorBasedBest {
            channel_name: 'valid_y_misclass',
            save_channel_names: ['valid_y_misclass'],
        },

    ],
    save_freq: 10,
    save_path: "%(save_path)slast.pkl"
}
