!obj:pylearn2.train.Train {
    dataset: &train !obj:noisy_encoder.scripts.emot_challenge.afew2_facetubes.AFEW2FaceTubes {
        which_set: 'train',
        sequence_length: &sequence_length 3,
        batch_size: &batch_size 256
    },
    model: !obj:pylearn2.models.mlp.MLP {
        batch_size: *batch_size,
        layers: [
                 !obj:noisy_encoder.scripts.emot_challenge.maxout3d.MaxoutConvC01TB {
                     layer_name: 'h0',
                     tied_b: 1,
                     W_lr_scale: .05,
                     b_lr_scale: .05,
                     num_channels: 16,
                     num_pieces: 1,
                     kernel_shape: [8, 8],
                     kernel_sequence_length: 1,
                     pool_shape: [6, 6],
                     pool_stride: [2, 2],
                     sequence_pool_shape: 1,
                     irange: .005,
                     max_kernel_norm: .9,
                 },
                 !obj:pylearn2.models.mlp.Softmax {
                     max_col_norm: 1.9365,
                     layer_name: 'y',
                     n_classes: 7,
                     irange: .005
                 }
                ],
        input_space: !obj:pylearn2.space.Conv3DSpace {
            shape: [96, 96],
            sequence_length: *sequence_length,
            num_channels: 3,
            axes: ['c', 0, 1, 't', 'b'],
        },
    },
    algorithm: !obj:pylearn2.training_algorithms.sgd.SGD {
        learning_rate: .05,
        init_momentum: .5,
        monitoring_dataset:
            {
                'valid' : !obj:noisy_encoder.scripts.emot_challenge.afew2_facetubes.AFEW2FaceTubes {
                    which_set: 'valid',
                    sequence_length: *sequence_length,
                    batch_size: *batch_size
                    },
            },
        cost: !obj:pylearn2.costs.mlp.dropout.Dropout {
            input_include_probs: { 'h0' : .8 },
            input_scales: { 'h0': 1. }
        },
        #termination_criterion: !obj:pylearn2.termination_criteria.MonitorBased {
            #channel_name: "valid_y_misclass",
            #prop_decrease: 0.,
            #N: 100
        #},
        termination_criterion: !obj:pylearn2.termination_criteria.EpochCounter {max_epochs: 1}
    },
    extensions: [
        !obj:pylearn2.train_extensions.best_params.MonitorBasedSaveBest {
             channel_name: 'valid_y_misclass',
             save_path: "${PYLEARN2_TRAIN_FILE_FULL_STEM}_best.pkl"
        },
        !obj:pylearn2.training_algorithms.sgd.MomentumAdjustor {
            start: 1,
            saturate: 250,
            final_momentum: .6
        },
        !obj:pylearn2.training_algorithms.sgd.LinearDecayOverEpoch {
            start: 1,
            saturate: 250,
            decay_factor: .01
        }
    ],
    save_path: "${PYLEARN2_TRAIN_FILE_FULL_STEM}.pkl",
    save_freq: 1
}
