!obj:pylearn2.models.mlp.MLP {
layers: [
         !obj:pylearn2.models.maxout.MaxoutConvC01B {
             layer_name: 'h0',
             pad: 4,
             tied_b: 1,
             W_lr_scale: .05,
             b_lr_scale: .05,
             num_channels: 8,
             num_pieces: 2,
             kernel_shape: [5, 5],
             pool_shape: [3, 3],
             pool_stride: [2, 2],
             irange: 0.005000,
             max_kernel_norm: .9,
         },
         !obj:pylearn2.models.maxout.MaxoutConvC01B {
             layer_name: 'h1',
             pad: 3,
             tied_b: 1,
             W_lr_scale: .05,
             b_lr_scale: .05,
             num_channels: 16,
             num_pieces: 2,
             kernel_shape: [5, 5],
             pool_shape: [3, 3],
             pool_stride: [2, 2],
             irange: 0.005000,
             max_kernel_norm: 1.9365,
         },
         !obj:pylearn2.models.maxout.MaxoutConvC01B {
             pad: 3,
             layer_name: 'h2',
             tied_b: 1,
             W_lr_scale: .05,
             b_lr_scale: .05,
             num_channels: 16,
             num_pieces: 2,
             kernel_shape: [5, 5],
             pool_shape: [3, 3],
             pool_stride: [2, 2],
             irange: 0.005000,
             max_kernel_norm: 1.9365,
         },
         !obj:pylearn2.models.maxout.Maxout {
            layer_name: 'h3',
            irange: .005,
            num_units: 10,
            num_pieces: 2,
            max_col_norm: 1.9
         },
         !obj:pylearn2.models.mlp.Softmax {
             max_col_norm: 1.9365,
             layer_name: 'y',
             n_classes: 10,
             irange: 0.005000
         }
        ],
input_space: !obj:pylearn2.space.Conv2DSpace {
    shape: [32, 32],
    num_channels: 3,
    axes: ['c', 0, 1, 'b'],
},
}

