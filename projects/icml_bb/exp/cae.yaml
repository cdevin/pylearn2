!obj:pylearn2.train.Train {
    # Here we specify the dataset to train on. We train on only the first 900 of the examples, so
    # that the rest may be used as a validation set.
    # The "&train" syntax lets us refer back to this object as "*train" elsewhere in the yaml file
    dataset: &train !obj:pylearn2.scripts.icml_2013_wrepl.black_box.black_box_dataset.BlackBoxDataset {
        which_set: 'extra',
        preprocessor: !obj:pylearn2.datasets.preprocessing.Standardize {},
        fit_preprocessor: 1,
        fit_preprocessor: 1,
    },
    # Here we specify the model to train as being an MLP
    model: !obj:pylearn2.models.autoencoder.ContractiveAutoencoder {
        nvis: 1875,
        nhid: 8000,
        irange: 0.05,
        act_enc: "sigmoid",
        act_dec: "sigmoid"
    },
    # We train using SGD and momentum
    algorithm: !obj:pylearn2.training_algorithms.sgd.SGD {
        learning_rate: %(lr_init)f,
        init_momentum: .5,
        batch_size: 100,
        monitoring_dataset:
            {
                #'train' : *train,
                'valid' : !obj:pylearn2.scripts.icml_2013_wrepl.black_box.black_box_dataset.BlackBoxDataset {
                    which_set: 'train',
                    start: 900,
                    stop: 1000,
                    preprocessor: !obj:pylearn2.datasets.preprocessing.Standardize {},
                    fit_preprocessor: 1,
                }
            },
       cost: !obj:pylearn2.costs.cost.SumOfCosts {
            costs: [
                !obj:pylearn2.costs.autoencoder.MeanSquaredReconstructionError {},
                [%(contraction_penalty)f, !obj:pylearn2.costs.cost.MethodCost { method: contraction_penalty }]
            ]
        },
        termination_criterion: !obj:pylearn2.termination_criteria.EpochCounter {
            max_epochs: %(max_epochs)d
        },
    },
    # We save the model whenever we improve on the validation set classification error
    extensions: [
        !obj:pylearn2.training_algorithms.sgd.MomentumAdjustor {
            start: 1,
            saturate: 250,
            final_momentum: .6
        },
        !obj:pylearn2.training_algorithms.sgd.LinearDecayOverEpoch {
            start: 1,
            saturate: %(lr_saturate)d,
            decay_factor: %(lr_decay_factor)f
        },
    ],
    save_path: "last.pkl",
    save_freq: 3
}
