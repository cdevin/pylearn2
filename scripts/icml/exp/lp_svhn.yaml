!obj:pylearn2.train.Train {
    dataset: &train !obj:pylearn2.datasets.svhn.SVHN {
        which_set: 'splitted_train',
        path: %(data_path)s
    },
    model: !obj:pylearn2.models.mlp.MLP {
        batch_size: 128,
        layers: [
                 !obj:galatea.mlp.ConvLinearC01B {
                     layer_name: 'h1',
                     pad: 0,
                     detector_channels: %(num_channels_1)i,
                     channel_pool_size: %(channel_pool_size_1)i,
                     kernel_shape: %(kernel_shape_1)s,
                     pool_shape: %(pool_shape_1)s,
                     pool_stride: %(pool_stride_1)s,
                     irange: .005,
                     max_kernel_norm: %(max_kernel_norm_1)f,
                 },
                 !obj:galatea.mlp.ConvLinearC01B {
                     layer_name: 'h2',
                     pad: 3,
                     detector_channels: %(num_channels_2)i,
                     channel_pool_size: %(channel_pool_size_2)i,
                     kernel_shape: %(kernel_shape_2)s,
                     pool_shape: %(pool_shape_2)s,
                     pool_stride: %(pool_stride_2)s,
                     irange: .005,
                     max_kernel_norm: %(max_kernel_norm_2)f,
                 },
                 !obj:galatea.mlp.ConvLinearC01B {
                     layer_name: 'h3',
                     pad: 3,
                     detector_channels: %(num_channels_3)i,
                     channel_pool_size: %(channel_pool_size_3)i,
                     kernel_shape: %(kernel_shape_3)s,
                     pool_shape: %(pool_shape_3)s,
                     pool_stride: %(pool_stride_3)s,
                     irange: .005,
                     max_kernel_norm: %(max_kernel_norm_3)f,
                 },

                 !obj:pylearn2.models.mlp.Softmax {
                     #max_col_norm: 3.873,
                     max_col_norm: 1.9365,
                     layer_name: 'y',
                     n_classes: 10,
                     irange: .005
                 }
                ],
        input_space: !obj:pylearn2.space.Conv2DSpace {
            shape: [32, 32],
            num_channels: 3,
            axes: ['b', 0, 1, 'c'],
        },
        dropout_include_probs: [ .5, .5, .5, 1 ],
        dropout_input_include_prob: .8,
        dropout_input_scale: 1.,
    },
    algorithm: !obj:pylearn2.training_algorithms.sgd.SGD {
        learning_rate: %(learning_rate)f,
        init_momentum: .5,
        monitoring_dataset:
            {
                #'train' : *train,
                'valid' : !obj:pylearn2.datasets.svhn.SVHN {
                              which_set: 'valid',
                              path: %(data_path)s
                          },
                'test' : !obj:pylearn2.datasets.svhn.SVHN {
                              which_set: 'test',
                              path: %(data_path)s
                          }
            },
        cost: !obj:pylearn2.costs.cost.MethodCost {
                method: 'cost_from_X',
                supervised: 1
        },
        termination_criterion: !obj:pylearn2.termination_criteria.MonitorBased {
            channel_name: "valid_y_misclass",
            prop_decrease: 0.,
            N: %(termination_paitence)i
        },
        update_callbacks: !obj:pylearn2.training_algorithms.sgd.ExponentialDecay {
            decay_factor: %(lr_decay_factor)f,
            min_lr: %(lr_min_lr)f
        }
    },
    extensions: [
        !obj:pylearn2.train_extensions.best_params.MonitorBasedSaveBest {
             channel_name: 'valid_y_misclass',
             save_path: "%(save_path)s_best.pkl"
        },
        !obj:pylearn2.training_algorithms.sgd.MomentumAdjustor {
            start: %(momentum_start)i,
            saturate: %(momentum_saturate)i,
            final_momentum: %(final_momentum)f
        }
    ],
    save_path: "%(save_path)s_last.pkl",
    save_freq: 1
}


