!obj:pylearn2.train.Train {
    # Here we specify the dataset to train on. We train on only the first 900 of the examples, so
    # that the rest may be used as a validation set.
    # The "&train" syntax lets us refer back to this object as "*train" elsewhere in the yaml file
    dataset: &train !obj:noisy_encoder.scripts.icml_bb.black_box_dataset.BlackBoxDataset {
        which_set: 'train',
        preprocessor: !obj:pylearn2.datasets.preprocessing.Standardize {},
        shuffle: 1,
        seed: %(seed)d,
        fit_preprocessor: 1,
        fit_test_preprocessor: 1,
    },
    # Here we specify the model to train as being an MLP
    model: !obj:pylearn2.models.mlp.MLP {
        batch_size: 100,
        layers : [
            # We use two hidden layers with rectified linear activations
            !obj:pylearn2.models.maxout.Maxout {
                    layer_name: 'h0',
                    irange: .005,
                    num_units: 500,
                    num_pieces: 3,
                    max_col_norm: 2.
            },
            !obj:pylearn2.models.maxout.Maxout {
                    layer_name: 'h1',
                    irange: .005,
                    num_units: 500,
                    num_pieces: 2,
                    max_col_norm: 2.
            },
            !obj:pylearn2.models.maxout.Maxout {
                    layer_name: 'h2',
                    irange: .005,
                    num_units: 500,
                    num_pieces: 5,
                    max_col_norm: 2.
            },
            !obj:pylearn2.models.mlp.Softmax {
                layer_name: 'y',
                init_bias_target_marginals: *train,
                # Initialize the weights to all 0s
                irange: .0,
                n_classes: 9
            }
        ],
        nvis: 1875,
    },
    # We train using SGD and momentum
    algorithm: !obj:pylearn2.training_algorithms.sgd.SGD {
        learning_rate: 0.400000,
        init_momentum: .5,
        # We monitor how well we're doing during training on a validation set
        monitoring_dataset:
            {
                'train' : *train,
            },
       cost: !obj:pylearn2.costs.mlp.dropout.Dropout {
            input_include_probs: { 'h0' : .8 },
            input_scales: { 'h0': 1. }
        },
        termination_criterion: !obj:pylearn2.termination_criteria.EpochCounter {
            max_epochs: 317
        },
    },
    # We save the model whenever we improve on the validation set classification error
    extensions: [
        !obj:pylearn2.training_algorithms.sgd.MomentumAdjustor {
            start: 1,
            saturate: 250,
            final_momentum: .6
        },
        !obj:pylearn2.training_algorithms.sgd.LinearDecayOverEpoch {
            start: 1,
            saturate: 100,
            decay_factor: 0.100000,
        },
    ],
    save_path: "last.pkl",
    save_freq: 100
}
