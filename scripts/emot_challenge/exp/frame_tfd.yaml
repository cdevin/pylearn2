!obj:pylearn2.train.Train {
    dataset: &train !obj:afew2.AFEW2FaceTubes {
        which_set: 'train',
        one_hot: 1,
        preproc: ['smooth'],
        size: [48, 48],
        source: 'samira',
        prep: '_prep',
        min_seq_length: 3,
    },
    model: !obj:seq_mlp.FrameMax {
        n_classes: &n_classes 7,
        scale: 1,
        ptype: 'logsum',
        input_space: !obj:emotiw.common.datasets.faces.facetubes.FaceTubeSpace {
            shape: [48, 48],
            num_channels: 1,
            axes: ['b', 't', 0, 1, 'c']
        },
        mlp: !pkl: "/data/lisatmp/mirzamom/results/challenge/frame/pJXdtyx_best.pkl",
        remove_last: 1,
        final_layer: !obj:pylearn2.models.mlp.MLP {
        layers: [
             !obj:pylearn2.models.maxout.Maxout {
                layer_name: 'h01',
                irange: .005,
                num_units: 500,
                num_pieces: 5,
                max_col_norm: 1.9
             },
            !obj:pylearn2.models.mlp.Softmax {
                 max_col_norm: 1.9365,
                 layer_name: 'y',
                 n_classes: *n_classes,
                 sparse_init: 23,
                 #irange: .005
            }
        ],
        nvis: 240
        }
    },
    algorithm: !obj:pylearn2.training_algorithms.sgd.SGD {
        batch_size: 1,
        learning_rate: %(learning_rate)f,
        init_momentum: .5,
        monitoring_dataset:
            {
        'valid' : !obj:afew2.AFEW2FaceTubes {
                        which_set: 'valid',
                        one_hot: 1,
                        preproc: ['smooth'],
                        size: [48, 48],
                        source: 'samira',
                        prep: '_prep',
                        min_seq_length: 3,
                },
            },
        cost: !obj:pylearn2.costs.mlp.dropout.Dropout {
            input_include_probs: { 'h01' : .8 },
            input_scales: { 'h01': 1. }
        },
        termination_criterion: !obj:pylearn2.termination_criteria.MonitorBased {
            channel_name: "valid_y_misclass",
            prop_decrease: 0.,
            N: 100
        },
        #termination_criterion: !obj:pylearn2.termination_criteria.EpochCounter {max_epochs: 1},
        update_callbacks: !obj:pylearn2.training_algorithms.sgd.ExponentialDecay {
            decay_factor: 1.00004,
            min_lr: .000001
        }
    },
    extensions: [
        !obj:pylearn2.train_extensions.best_params.MonitorBasedSaveBest {
             channel_name: 'valid_y_misclass',
             save_path: "%(save_path)sbest.pkl"
        },
        !obj:pylearn2.training_algorithms.sgd.MomentumAdjustor {
            start: 1,
            saturate: 250,
            final_momentum: .7
        }
    ],
    #save_path: "%(save_path)slast.pkl",
    #save_freq: 1
}
