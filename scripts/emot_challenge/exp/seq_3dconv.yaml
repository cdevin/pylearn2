!obj:pylearn2.train.Train {
    dataset: &train !obj:emotiw.common.datasets.faces.afew2_facetubes.AFEW2FaceTubes {
        which_set: 'train',
        one_hot: 1
    },
    model: !obj:seq_mlp.FrameMax {
        n_classes: &n_classes 7,
        input_space: !obj:emotiw.common.datasets.faces.facetubes.FaceTubeSpace {
            shape: [96, 96],
            num_channels: 3,
            axes: ['b', 't', 0, 1, 'c']
        },
        mlp: !obj:pylearn2.models.mlp.MLP {
            layers: [
                !obj:pylearn2.models.maxout.MaxoutConvC01B {
                     layer_name: 'h0',
                     pad: 0,
                     num_channels: 64,
                     num_pieces: 2,
                     kernel_shape: [8, 8],
                     pool_shape: [4, 4],
                     pool_stride: [2, 2],
                     irange: .005,
                     max_kernel_norm: .9,
                 },
                 !obj:pylearn2.models.maxout.Maxout {
                     layer_name: 'h1',
                     num_units: &last_ndim 240,
                     num_pieces: 2,
                     irange: .005,
                 },
            ],
        input_space: !obj:pylearn2.space.Conv2DSpace {
            shape: [96, 96],
            num_channels: 3,
            axes: ['c', 0, 1, 'b'],
            },
        },
        final_layer: !obj:pylearn2.models.mlp.MLP {
        layers: [
            !obj:pylearn2.models.mlp.Softmax {
                 max_col_norm: 1.9365,
                 layer_name: 'y',
                 n_classes: *n_classes,
                 irange: .005
            }
        ],
        nvis: *last_ndim
        }
    },
    algorithm: !obj:pylearn2.training_algorithms.sgd.SGD {
        batch_size: 1,
        learning_rate: .0001,
        init_momentum: .5,
        monitoring_dataset:
            {
            'valid' : !obj:emotiw.common.datasets.faces.afew2_facetubes.AFEW2FaceTubes {
                        which_set: 'Val',
                        one_hot: 1
                },
            },
        cost: !obj:pylearn2.costs.mlp.dropout.Dropout {},
        termination_criterion: !obj:pylearn2.termination_criteria.MonitorBased {
            channel_name: "valid_y_misclass",
            prop_decrease: 0.,
            N: 100
        },
        #termination_criterion: !obj:pylearn2.termination_criteria.EpochCounter {max_epochs: 1},
        update_callbacks: !obj:pylearn2.training_algorithms.sgd.ExponentialDecay {
            decay_factor: 1.00004,
            min_lr: .000001
        }
    },
    extensions: [
        !obj:pylearn2.train_extensions.best_params.MonitorBasedSaveBest {
             channel_name: 'valid_y_misclass',
             save_path: "${PYLEARN2_TRAIN_DIR}best.pkl"
        },
        !obj:pylearn2.training_algorithms.sgd.MomentumAdjustor {
            start: 1,
            saturate: 250,
            final_momentum: .7
        }
    ]
}
